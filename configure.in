AC_INIT(src/test.cpp)
AM_INIT_AUTOMAKE(Otawa, 0.1)
AC_LANG(C++)


dnl ==== Conventions ====
dnl XXX_CXXFLAGS		Flags for compiling when using module XXX.
dnl XXX_LIBS			Flags fir linking when using module XXX.
dnl XXX_DEPS			Dependencies when using module XXX.
dnl BUILD_XXX_CXXFLAGS	Flags for compiling module XXX.
dnl BUILD_XXX_LIBS		Flags for linking module XXX.
dnl EXTERN_XXX_CXXFLAGS	Flags for compiling with module XXX by external program.
dnl EXTERN_XXX_LIBS		Flags for linking with module XXX by external program.
dnl PLUGINS				Plugins to build.
dnl TESTS				Tests to perform.
dnl ILP_PLUGIN			Linking flags when using an ILP engine.
dnl ILP_DEP				Dependencies on the ILP.
dnl LOADER_PLUGIN		Linking flags when using a loader.
dnl LOADER_DEP			Dependencies on the loader.
dnl ILP_PATHS			Paths of directories containing ILP plugins.
dnl LOADER_PATHS		Paths of directories containing loader plugins.


dnl ==== Plugin activation ====
AC_ARG_WITH(plugin, [  --with-plugin[={yes,no}]	Activate actual plugin usage.],,with_plugin=no)
if test "$with_plugin" = yes; then
	AC_DEFINE(HAVE_PLUGIN,, [Actual plugins activated.])
fi


dnl ==== Building mode ====
AC_ARG_WITH(mode, [  --with-mode={dev,debug,normal,final}	Activate the given build mode.],,with_mode=dev)
case $with_mode in
dev)
	CXXFLAGS="$CXXFLAGS -g3"
	if test "$with_plugin" = yes; then
		ILP_PATHS=$PWD/lib/otawa/ilp
		LOADER_PATHS=$PWD/lib/otawa/loader
		test -d $ILP_PATHS || mkdir -p $ILP_PATHS
		test -d $LOADER_PATHS || mkdir -p $LOADER_PATHS
		ln -s $PWD/src/prog/libotawa.so lib/libotawa.so
	fi
	;;
debug)
	CXXFLAGS="$CXXFLAGS -g3"
	ILP_PATHS=$libdir/otawa/ilp
	LOADER_PATHS=$libdir/otawa/loader
	;;
normal)
	ILP_PATHS=$libdir/otawa/ilp
	LOADER_PATHS=$libdir/otawa/loader
	;;
final)
	CPPFLAGS="$CPPFLAGS -DNDEBUG"
	CXXFLAGS="$CXXFLAGS -O2"
	ILP_PATHS=$libdir/otawa/ilp
	LOADER_PATHS=$libdir/otawa/loader
	;;
*)
	AC_MSG_ERROR([unknown mode $with_mode])
	;;
esac


dnl ==== Standard tests ====
AM_CONFIG_HEADER(config.h)
AC_PROG_CC
AC_PROG_CXX
AC_PROG_RANLIB
AC_PROG_YACC
AM_PROG_LEX
AC_STDC_HEADERS
AC_PATH_PROG(BASH_PATH, bash)
AC_CHECK_FUNCS([strdup])
AC_CHECK_FUNCS([strtol])
AC_C_CONST
AC_C_INLINE
AC_FUNC_MALLOC
AC_FUNC_REALLOC
AC_FUNC_STRTOD
AC_HEADER_STDBOOL
AC_TYPE_SIZE_T


dnl ==== Globals ====
PLUGINS=
TESTS=
AC_SUBST(PLUGINS)
AC_SUBST(TESTS)
extern_path=`dirname $PWD`
DEFAULT_HEADER_PATHS="/usr/include /usr/local/include"
SITE_HEADER_PATHS="$HOME/.local/include $DEFAULT_HEADER_PATHS"
DEFAULT_LIB_PATHS="/lib /usr/lib /usr/local/lib"
SITE_LIB_PATHS="$HOME/.local/lib $DEFAULT_LIB_PATHS"
HAVE_ILP=no



dnl ==== Site directory ====
if test "$prefix" != NONE; then
	SITE_HEADER_PATHS=" $prefix/include $SITE_HEADER_PATHS"
	SITE_LIB_PATHS=" $prefix/lib $SITE_LIB_PATHS"
fi
AC_ARG_WITH(sitedir, [  --with-sitedir=PATHS		Add the given directories for resolving resources.],,)
for dir in $with_sitedir; do
	SITE_HEADER_PATHS="$SITE_HEADER_PATHS $dir/include"
	SITE_LIB_PATHS="$SITE_LIB_PATHS $dir/lib"
done


dnl ==== Without extern ====
AC_ARG_ENABLE(extern, [  -with-extern	Use external directory for retrieving libraries.],,enable_extern=yes)


dnl ==== Auto-documentation ====
AC_ARG_ENABLE(doc,
	[  --enable-doc		  Enable documentation generation [default=yes]],
	,
	enable_doc=yes)
if test $enable_doc = yes; then
	AC_CHECK_PROG(HAVE_DOXYGEN,doxygen,yes)
	if test "$HAVE_DOXYGEN" = yes; then
		AC_DEFINE(HAVE_DOXYGEN,,[Doxygen is available.])
		AUTODOC=autodoc
	else
		AUTODOC=
	fi
	AC_SUBST(AUTODOC)
fi


dnl ==== elm ====
AC_ARG_WITH(elm, [  --with-elm=PATH	Use elm from the given directory.],,)
if test "$with_elm"; then
	header_paths="$with_elm/include"
	lib_paths="$with_elm/src"
elif test "$enable_extern" = yes; then
	header_paths="$extern_path/elm/include $SITE_HEADER_PATHS" 
	lib_paths="$extern_path/elm/src $SITE_LIB_PATHS"
else
	header_paths="$SITE_HEADER_PATHS" 
	lib_paths="$SITE_LIB_PATHS"
	AC_MSG_WARN([header_paths $header_paths])
	AC_MSG_WARN([lib_paths $lib_paths])
fi
AC_MSG_CHECKING([for elm])
check=yes
check_header(ELM_CXXFLAGS, elm/string.h, $header_paths, $CFLAGS)
check_lib(ELM_LIBS, elm, [
	#include <elm/string.h>
	int main(void) {
		elm::String str("Hello, World !\n");
		return 0;
	}
], $lib_paths, [$ELM_CXXFLAGS $CFLAGS], $LIBS)
if test "$check" = yes; then
	AC_MSG_RESULT([yes])
else
	AC_MSG_ERROR([no])
fi
AC_SUBST(ELM_LIBS)
AC_SUBST(ELM_CXXFLAGS)


dnl ==== otawa usage ====
BUILD_PROG_CXXFLAGS="-I$PWD/include $ELM_CXXFLAGS"
PROG_CXXFLAGS=$BUILD_PROG_CXXFLAGS
BUILD_PROG_LIBS="-ldl $ELM_LIBS"
PROG_LIBS="-lotawa -L$PWD/src/prog $BUILD_PROG_LIBS"
if test "$with_plugin" = yes; then
	PROG_DEP=
else
	PROG_DEP="$PWD/src/prog/libotawa.a"
fi
if test "$prefix" != NONE; then
	EXTERN_PROG_CXXFLAGS="-I$prefix/include"
	EXTERN_PROG_LIBS="-L$prefix/lib"
fi
EXTERN_PROG_CXXFLAGS="$EXTERN_PROG_CXXFLAGS $ELM_CXXFLAGS"
EXTERN_PROG_LIBS="$EXTERN_PROG_LIBS -lotawa $ELM_LIBS"
AC_SUBST(BUILD_PROG_CXXFLAGS)
AC_SUBST(BUILD_PROG_LIBS)
AC_SUBST(PROG_CXXFLAGS)
AC_SUBST(PROG_LIBS)
AC_SUBST(PROG_DEP)
AC_SUBST(EXTERN_PROG_CXXFLAGS)
AC_SUBST(EXTERN_PROG_LIBS)


dnl ==== gliss ppc ====
AC_ARG_WITH(gliss_ppc, [  --with-gliss_ppc[=no|yes|PATH]	Use GLISS PPC from the given directory.],, with_gliss_ppc=maybe)
if test "$with_gliss_ppc" != no; then
	if test "$with_gliss_ppc" = yes -o "$with_gliss_ppc" = maybe; then
		header_paths="$extern_path/ppc/include $extern_path/ppc/extern $SITE_HEADER_PATHS"
		lib_paths="$extern_path/ppc/lib $SITE_LIB_PATHS"
	else
		header_paths="$with_gliss_ppc/include $with_gliss_ppc/extern"
		lib_paths="$with_gliss_ppc/lib"
	fi
	AC_MSG_CHECKING([for gliss ppc])
	check=yes
	check_header(BUILD_GLISS_PPC_CXXFLAGS, iss_include.h, $header_paths,)
	check_header(BUILD_GLISS_PPC_CXXFLAGS, elfread.h, $header_paths,$BUILD_GLISS_PPC_CXXFLAGS)
	check_lib(BUILD_GLISS_PPC_LIBS, emul, [
		#include <iss_include.h>
		int main(void) {
			iss_init(0, 0, 0, 0, 0);
			return 0;
		}
	], $lib_paths, $BUILD_GLISS_PPC_CXXFLAGS,)
	if test "$check" = yes; then
		GLISS_PPC_LIBS="-L$PWD/src/gliss -lotawa_ppc $BUILD_GLISS_PPC_LIBS"
		GLISS_PPC_DEP="$PWD/src/gliss/libotawa_ppc.a"
		HAVE_GLISS_PPC=yes
		AC_DEFINE(HAVE_GLISS_PPC,,[GLISS PPC available])
		PLUGINS="$PLUGINS gliss"
		AC_MSG_RESULT([yes])
	elif test "$with_gliss_ppc" = maybe; then
			AC_MSG_RESULT([no])
	else
		AC_MSG_ERROR([no])
	fi
else
	AC_MSG_ERROR([no more loader])
fi
EXTERN_GLISS_PPC_CXXFLAGS=""
EXTERN_GLISS_PPC_LIBS="-lotawa_ppc $BUILD_GLISS_PPC_LIBS"
AC_SUBST(GLISS_PPC_CXXFLAGS)
AC_SUBST(GLISS_PPC_LIBS)
AC_SUBST(GLISS_PPC_DEP)
AC_SUBST(BUILD_GLISS_PPC_CXXFLAGS)
AC_SUBST(BUILD_GLISS_PPC_LIBS)
AC_SUBST(EXTERN_GLISS_PPC_CXXFLAGS)
AC_SUBST(EXTERN_GLISS_PPC_LIBS)


dnl ==== lp_solve ====
AC_ARG_WITH(lp_solve, [  --with-lp_solve[=PATH]	Use lp_solve from the given directory.],, with_lp_solve=yes)
if test "$with_lp_solve" != no; then
	if test "$with_lp_solve" = yes; then
		header_paths="$extern_path/lp_solve $SITE_HEADER_PATHS" 
		lib_paths="$extern_path/lp_solve $SITE_LIB_PATHS"
	else
		header_paths="$with_lp_solve"
		lib_paths="$with_lp_solve"
	fi
	AC_MSG_CHECKING([for lp_solve])
	check=yes
	check_header(BUILD_LP_SOLVE_CXXFLAGS, lpkit.h, $header_paths,)
	check_lib(BUILD_LP_SOLVE_LIBS, lpk, [
		#include <lpkit.h>
		int main(void) {
			make_lp(0, 0);
			return 0;
		}
	], $lib_paths, $BUILD_LP_SOLVE_CXXFLAGS,)
	if test "$check" = yes; then
		with_lp_solve=yes;
		EXTERN_LP_SOLVE_CXXFLAGS=""
		if test "$with_plugin" = yes; then
			LP_SOLVE_LIBS=""
			EXTERN_LP_SOLVE_LIBS=""
			LP_SOLVE_DEP="$PWD/src/lp_solve/lp_solve.so"
			if test "$with_mode" = dev; then
				test -e $ILP_PATHS/lp_solve.so || ln -s $PWD/src/lp_solve/lp_solve.so $ILP_PATHS/lp_solve.so
			fi
		else
			LP_SOLVE_LIBS="-ulp_solve_plugin -L$PWD/src/lp_solve -lotawa_lp_solve $BUILD_LP_SOLVE_LIBS"
			EXTERN_LP_SOLVE_LIBS="-ulp_solve_plugin -lotawa_lp_solve $BUILD_LP_SOLVE_LIBS"
			LP_SOLVE_DEP="$PWD/src/lp_solve/libotawa_lp_solve.a"
		fi
		AC_DEFINE(HAVE_LP_SOLVE,,[lp_solve available])
		HAVE_LP_SOLVE=yes
		HAVE_ILP=yes
		TESTS="$TESTS lp_solve categorisation ccg"
		PLUGINS="$PLUGINS lp_solve"
		AC_MSG_RESULT([yes])
	else
		AC_MSG_RESULT([no])
	fi
fi
AC_SUBST(LP_SOLVE_CXXFLAGS)
AC_SUBST(LP_SOLVE_LIBS)
AC_SUBST(LP_SOLVE_DEP)
AC_SUBST(BUILD_LP_SOLVE_CXXFLAGS)
AC_SUBST(BUILD_LP_SOLVE_LIBS)
AC_SUBST(EXTERN_LP_SOLVE_CXXFLAGS)
AC_SUBST(EXTERN_LP_SOLVE_LIBS)


dnl ==== Plugins ====
if test "$HAVE_LP_SOLVE" = yes; then
	ILP_PLUGIN="$LP_SOLVE_LIBS"
	ILP_DEP="$LP_SOLVE_DEP"
fi
if test "$HAVE_GLISS_PPC" = yes; then
	LOADER_PLUGIN="$GLISS_PPC_LIBS"
	LOADER_DEP="$GLISS_PPC_DEP"
elif test "$with_plugin" != yes; then
	AC_MSG_ERROR([no loader is available.])
fi
AC_SUBST(ILP_PLUGIN)
AC_SUBST(ILP_DEP)
AC_SUBST(LOADER_PLUGIN)
AC_SUBST(LOADER_DEP)


dnl ==== Post-phase ====
if test "$with_plugin" = yes -o "$ILP_PLUGIN" != ""; then
	TESTS="$TESTS ipet"
	AC_DEFINE(HAVE_ILP,,[ILP engine available.])
fi
AC_DEFINE_UNQUOTED(ILP_PATHS, "$ILP_PATHS", [Paths for ILP plugins])
AC_DEFINE_UNQUOTED(LOADER_PATHS, "$LOADER_PATHS", [Paths for loader plugins])
AM_CONDITIONAL(WITH_PLUGIN, [test "$with_plugin" = yes])
AM_CONDITIONAL(WITH_ILP, [test "$HAVE_ILP" = yes])
if test "$with_plugin" = yes -a "$with_mode" = dev; then
	AC_CONFIG_COMMANDS(
		[plugin],
		[echo "WARNING: do not forget to add $PWD/lib to your LD_LIBRARY_PATH environment variable."]
	)
fi


dnl ==== Output ====
AC_OUTPUT([
	Makefile
	src/Makefile
	src/prog/Makefile
	src/gliss/Makefile
	src/oshell/Makefile
	src/lp_solve/Makefile
	src/dumpcfg/Makefile
	src/mkff/Makefile
	examples/Makefile
	bin/Makefile
	bin/otawa-config
	test/Makefile
	test/lp_solve/Makefile
	test/ipet/Makefile
	test/ets/Makefile
	test/dom/Makefile
	test/ct/Makefile
	test/ccg/Makefile
	test/categorisation/Makefile
	examples/ilp_times/Makefile
	examples/ets_timing/Makefile
	include/Makefile
	include/otawa/Makefile
	include/otawa/ast/Makefile
	include/otawa/cfg/Makefile
	include/otawa/gliss/Makefile
	include/otawa/prog/Makefile
	include/otawa/prop/Makefile
	include/otawa/ilp/Makefile
	include/otawa/proc/Makefile
	include/otawa/ipet/Makefile
	include/otawa/lp_solve/Makefile
	include/otawa/ets/Makefile
	include/otawa/util/Makefile
	include/otawa/hardware/Makefile
], [])
