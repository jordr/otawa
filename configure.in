AC_INIT(src/test.cpp)
AM_INIT_AUTOMAKE(Otawa, 0.1)
AC_LANG(C++)


dnl ==== Building mode ====
AC_ARG_WITH(mode, [  --with-mode={debug,normal,final}	Activate the given build mode.],,with_mode=normal)
case $with_mode in
debug)
	CXXFLAGS="$CXXFLAGS -g3"
	;;
normal)
	;;
final)
	CPPFLAGS="$CPPFLAGS -DNDEBUG"
	CXXFLAGS="$CXXFLAGS -O2"
	;;
*)
	AC_MSG_ERROR([unknown mode $with_mode])
	;;
esac


dnl ==== Standard tests ====
AM_CONFIG_HEADER(config.h)
AC_PROG_CXX
AC_PROG_RANLIB
AC_PROG_YACC
AM_PROG_LEX
AC_STDC_HEADERS
AC_PATH_PROG(BASH_PATH, bash)
AC_CHECK_FUNCS([strdup])
AC_CHECK_FUNCS([strtol])
AC_C_CONST
AC_C_INLINE
AC_FUNC_MALLOC
AC_FUNC_REALLOC
AC_FUNC_STRTOD
AC_HEADER_STDBOOL
AC_TYPE_SIZE_T


dnl ==== Globals ====
PLUGINS=
TESTS=
AC_SUBST(PLUGINS)
AC_SUBST(TESTS)
CXXFLAGS="$CXXFLAGS -I$PWD/include"
extern_path=`dirname $PWD`


dnl ==== Site directory ====
AC_ARG_WITH(sitedir, [  --with-sitedir=PATHS		Add the given directories for resolving resources.],,)
for dir in $with_sitedir; do
	CFLAGS="$CFLAGS -I$dir/include"
	LIBS=" -L$dir/lib $LIBS"
done


dnl ==== Auto-documentation ====
AC_ARG_ENABLE(doc,
	[  --enable-doc		  Enable documentation generation [default=yes]],
	,
	enable_doc=yes)
if test $enable_doc = yes; then
	AC_CHECK_PROG(HAVE_DOXYGEN,doxygen,yes)
	if test "$HAVE_DOXYGEN" = yes; then
		AC_DEFINE(HAVE_DOXYGEN,,[Doxygen is available.])
		AUTODOC=autodoc
	else
		AUTODOC=
	fi
	AC_SUBST(AUTODOC)
fi


dnl ==== elm ====
AC_ARG_WITH(elm, [  --with-elm=PATH	Use elm from the given directory.],,)
if test ! "$with_elm"; then
	header_paths="$extern_path/elm/include $SITE_HEADER_PATHS" 
	lib_paths="$extern_path/elm/src $SITE_LIB_PATHS"
else
	header_paths="$with_elm/include"
	lib_paths="$with_elm/src"
fi
AC_MSG_CHECKING([for elm])
check=yes
check_header(ELM_CXXFLAGS, elm/string.h, $header_paths,)
check_lib(ELM_LIBS, elm, [
	#include <elm/string.h>
	int main(void) {
		elm::String str("Hello, World !\n");
		return 0;
	}
], $lib_paths, $ELM_CXXFLAGS,)
if test "$check" = yes; then
	CXXFLAGS="$CXXFLAGS $ELM_CXXFLAGS"
	LIBS=" $ELM_LIBS $LIBS"
	AC_MSG_RESULT([yes])
else
	AC_MSG_ERROR([no])
fi


dnl ==== gliss ppc ====
AC_ARG_WITH(gliss_ppc, [  --with-gliss_ppc[=no|yes|PATH]	Use GLISS PPC from the given directory.],, with_gliss_ppc=maybe)
if test "$with_gliss_ppc" != no; then
	if test "$with_gliss_ppc" = yes -o "$with_gliss_ppc" = maybe; then
		header_paths="$extern_path/ppc/include $extern_path/ppc/extern $SITE_HEADER_PATHS"
		lib_paths="$extern_path/ppc/lib $SITE_LIB_PATHS"
	else
		header_paths="$with_gliss_ppc/include $with_gliss_ppc/extern"
		lib_paths="$with_gliss_ppc/lib"
	fi
	AC_MSG_CHECKING([for gliss ppc])
	check=yes
	check_header(GLISS_PPC_CXXFLAGS, iss_include.h, $header_paths,)
	check_header(GLISS_PPC_CXXFLAGS, elfread.h, $header_paths,$GLISS_PPC_CXXFLAGS)
	check_lib(GLISS_PPC_LIBS, emul, [
		#include <iss_include.h>
		int main(void) {
			iss_init(0, 0, 0, 0, 0);
			return 0;
		}
	], $lib_paths, $GLISS_PPC_CXXFLAGS,)
	if test "$check" = yes; then
		AC_SUBST(GLISS_PPC_CXXFLAGS)
		AC_SUBST(GLISS_PPC_LIBS)
		AC_DEFINE(HAVE_GLISS_PPC,,[GLISS PPC available])
		PLUGINS="$PLUGINS gliss"
		AC_MSG_RESULT([yes])
	elif test "$with_gliss_ppc" = maybe; then
			AC_MSG_RESULT([no])
	else
		AC_MSG_ERROR([no])
	fi
fi


dnl ==== heptane ====
AC_ARG_ENABLE(heptane, [  --enable-heptane	Use the Heptane plug-in.],,with_heptane=yes)
if test "$with_heptane" = yes; then
	PLUGINS="$PLUGINS heptane"
	HEPTANE_CXXFLAGS="$GLISS_PPC_CXXFLAGS"
	HEPTANE_LIBS="$GLISS_PPC_LIBS"
	AC_DEFINE(HAVE_HEPTANE,,[Heptane plug-in available])
	AC_SUBST(HEPTANE_CXXFLAGS)
	AC_SUBST(HEPTANE_LIBS)
fi


dnl ==== lp_solve ====
AC_ARG_WITH(lp_solve, [  --with-lp_solve[=PATH]	Use lp_solve from the given directory.],, with_lp_solve=yes)
if test "$with_lp_solve" != no; then
	if test "$with_lp_solve" = yes; then
		header_paths="$extern_path/lp_solve $SITE_HEADER_PATHS" 
		lib_paths="$extern_path/lp_solve $SITE_LIB_PATHS"
	else
		header_paths="$with_lp_solve"
		lib_paths="$with_lp_solve"
	fi
	AC_MSG_CHECKING([for lp_solve])
	check=yes
	check_header(LP_SOLVE_CXXFLAGS, lpkit.h, $header_paths,)
	check_lib(LP_SOLVE_LIBS, lpk, [
		#include <lpkit.h>
		int main(void) {
			make_lp(0, 0);
			return 0;
		}
	], $lib_paths, $LP_SOLVE_CXXFLAGS,)
	if test "$check" = yes; then
		AC_SUBST(LP_SOLVE_CXXFLAGS)
		AC_SUBST(LP_SOLVE_LIBS)
		AC_DEFINE(HAVE_LP_SOLVE,,[lp_solve available])
		HAVE_ILP=yes
		TESTS="$TESTS lp_solve"
		PLUGINS="$PLUGINS lp_solve"
		AC_MSG_RESULT([yes])
	else
		AC_MSG_RESULT([no])
	fi
fi


dnl ==== Post-phase ====
if test "$HAVE_ILP" = yes; then
	TESTS="$TESTS ipet"
	AC_DEFINE(HAVE_ILP,,[ILP engine available.])
fi


dnl ==== Fix due to plugins missing ====
CXXFLAGS="$CXXFLAGS $GLISS_PPC_CXXFLAGS"
LIBS="$GLISS_PPC_LIBS $LIBS"


dnl ==== Output ====
AC_OUTPUT([
	Makefile
	src/Makefile
	src/prog/Makefile
	src/gliss/Makefile
	src/oshell/Makefile
	src/heptane/Makefile
	src/lp_solve/Makefile
	src/dumpcfg/Makefile
	src/mkff/Makefile
	examples/Makefile
	bin/Makefile
	bin/otawa-config
	test/Makefile
	test/lp_solve/Makefile
	test/ipet/Makefile
	test/ets/Makefile
	test/dom/Makefile
	test/ct/Makefile
	include/Makefile
	include/otawa/Makefile
	include/otawa/ast/Makefile
	include/otawa/cfg/Makefile
	include/otawa/gliss/Makefile
	include/otawa/prog/Makefile
	include/otawa/prop/Makefile
	include/otawa/ilp/Makefile
	include/otawa/proc/Makefile
	include/otawa/ipet/Makefile
	include/otawa/lp_solve/Makefile
	include/otawa/ets/Makefile
	include/otawa/util/Makefile
	include/otawa/hardware/Makefile
], [])
