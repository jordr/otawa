AC_INIT(src/test.cpp)
AM_INIT_AUTOMAKE(Otawa, 0.1)
AM_CONFIG_HEADER(config.h)


AC_PROG_CXX
AC_PROG_RANLIB
AC_PROG_YACC
AM_PROG_LEX
AC_STDC_HEADERS
AC_HAVE_HEADERS(string.h)
AC_PATH_PROG(BASH_PATH, bash)

TESTS=

AC_ARG_ENABLE(doc,
	[  --enable-doc		  Enable documentation generation [default=yes]],
	,
	enable_doc=yes)
if test $enable_doc = yes; then
	AC_CHECK_PROG(USE_DOX,doxygen,yes)
fi


AC_ARG_WITH(elm, [  --with-elm[=PATH]	Set the path to the Elm library (default $PWD/elm).],,with_elm=yes)
AC_MSG_CHECKING([for elm])
if test $with_elm = 'no'; then
	AC_MSG_ERROR([Elm library is mandatory.])
elif test $with_elm = 'yes'; then
	if test -d $PWD/extern/elm; then
		ELM_PATH=$PWD/extern/elm
		ELM_CFLAGS=-I$ELM_PATH/include
		ELM_LDADD="-L$ELM_PATH/src -lelm"
	elif test -d $HOME/local/include/elm && -f $HOME/local/lib/libelm.a; then
		ELM_PATH=$HOME/local
		ELM_CFLAGS=-I$(ELM_PATH)/include
		ELM_LDADD="-L$(ELM_PATH)/lib -lelm"
	elif test -d /usr/local/include/elm && -f /usr/local/lib/libelm.a; then
		ELM_PATH=/usr/local
		ELM_CFLAGS=-I$(ELM_PATH)/include
		ELM_LDADD="-L$(ELM_PATH)/lib -lelm"
	elif test -d /usr/include/elm && -f /usr/lib/libelm.a; then
		ELM_PATH=/usr/
		ELM_CFLAGS=
		ELM_LDADD=
	else
		AC_MSG_ERROR([Cannot found the Elm library!])
	fi
else
	ELM_PATH=$with_elm
	ELM_CFLAGS=-I$ELM_PATH/include
	ELM_LDADD="-L$ELM_PATH/lib -lelm"
fi
AC_MSG_RESULT([assumed at $ELM_PATH])
AC_SUBST(ELM_CFLAGS)
AC_SUBST(ELM_LDADD)


AC_ARG_ENABLE(heptane, [  --enable-heptane [default=yes]],,enable_heptane=yes)
if test $enable_heptane = 'yes'; then
	HEPTANE_LIB=heptane
	HEPTANE_CFLAGS=-DHEPTANE_ENABLED
	HEPTANE_LDADD="-L$PWD/src/heptane -lothept"
fi
AC_SUBST(HEPTANE_LIB)
AC_SUBST(HEPTANE_CFLAGS)
AC_SUBST(HEPTANE_LDADD)


AC_ARG_WITH(glissppc, [  --with-glissppc[=PATH]  Add support for Gliss PPC],,with_glissppc=maybe)
if test "$with_glissppc" = no; then
	if test $enable_heptane = yes; then
		AC_MSG_WARN([glissppc is mandatory when using heptane.])
		with_glissppc=yes
	fi
fi
if test $with_glissppc != no; then
	AC_MSG_CHECKING([for glissppc])
	if test $with_glissppc = yes -o $with_glissppc = maybe; then
		GLISSPPC_PATH=$PWD/extern/gliss-ppc
	else
		GLISSPPC_PATH=$with_glissppc
	fi
	if test ! -d "$GLISSPPC_PATH"; then
		if $with_glissppc = yes; then
			AC_MSG_ERROR([GLISS PPC cannot be found at $GLISSPPC_PATH.])
		fi
	else
		if test $with_glissppc = yes -o $with_glissppc = maybe; then
			AC_MSG_RESULT([found at $GLISSPPC_PATH]);
		else
			AC_MSG_RESULT([found])
		fi
		GLISSPPC_LIB=gliss
		GLISSPPC_LDADD="-L$PWD/src/gliss -lgliss -L$GLISSPPC_PATH/lib -lemul"
		GLISSPPC_CFLAGS="-DGLISSPPC_ENABLED -I$GLISSPPC_PATH/include -I$GLISSPPC_PATH/extern"
	fi
fi
AC_SUBST(GLISSPPC_LIB)
AC_SUBST(GLISSPPC_LDADD)
AC_SUBST(GLISSPPC_CFLAGS)

AC_ARG_WITH(lp_solve, [  --with-lp_solve=PATH  Add support for lp_solve (default yes)],,with_lp_solve=yes)
if test $with_lp_solve != no; then
	AC_MSG_CHECKING([for lp_solve])
	if test $with_lp_solve = yes; then
		LP_SOLVE_PATH=$PWD/extern/lp_solve
	else
		LP_SOLVE_PATH=$with_lp_solve
	fi
	if test ! -e "$LP_SOLVE_PATH/liblpk.a"; then
		if test $with_lp_solve = yes; then
			AC_MSG_RESULT([not found])
		else
			AC_MSG_ERROR([lp_solve cannot be found at $LP_SOLVE_PATH.])
		fi
	else
		if test $with_lp_solve = yes; then
			AC_MSG_RESULT([found at $LP_SOLVE_PATH])
		else
			AC_MSG_RESULT([found])
		fi
		LP_SOLVE_DEF=-DLP_SOLVE
		LP_SOLVE_LIB=lp_solve
		LP_SOLVE_LDADD="-L$LP_SOLVE_PATH/ -llpk -lm"
		LP_SOLVE_CFLAGS="-DLP_SOLVE_ENABLED -I$LP_SOLVE_PATH"
		TESTS="$TESTS lp_solve ipet"
	fi
fi
AC_SUBST(LP_SOLVE_DEF)
AC_SUBST(LP_SOLVE_LIB)
AC_SUBST(LP_SOLVE_LDADD)
AC_SUBST(LP_SOLVE_CFLAGS)

AC_SUBST(TESTS)

AC_OUTPUT([
	Makefile
	src/Makefile
	src/prog/Makefile
	src/gliss/Makefile
	src/oshell/Makefile
	src/heptane/Makefile
	src/lp_solve/Makefile
	examples/Makefile
	examples/dumpcfg/Makefile
	bin/Makefile
	bin/otawa-config
	test/Makefile
	test/lp_solve/Makefile
	test/ipet/Makefile
	test/ets/Makefile
	test/dom/Makefile
	test/ct/Makefile
	include/Makefile
	include/otawa/Makefile
	include/otawa/ast/Makefile
	include/otawa/cfg/Makefile
	include/otawa/gliss/Makefile
	include/otawa/prog/Makefile
	include/otawa/prop/Makefile
	include/otawa/ilp/Makefile
	include/otawa/proc/Makefile
	include/otawa/ipet/Makefile
	include/otawa/lp_solve/Makefile
	include/otawa/ets/Makefile
	include/otawa/util/Makefile
], [])
