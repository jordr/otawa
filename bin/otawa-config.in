#!@BASH_PATH@

# Initialization
option=
cflags=
libs=
data=
doc=
ilp=
loader=
list_proc=
list_modules=
cflags_text="-I@prefix@/include"
libs_text="@prefix@/lib/libotawa.la"


# Configurations
#	KIND: kind of module (one of lib, ilp, loader)
#	DOC: module documentation
#	LIB: special link options
#	LIB_STATIC: special option for static link

function config_display {
	KIND="lib"
	DOC="graph displayer"
}

function config_gensim {
	KIND="lib"
	DOC="generic temporal simulator"
}

function config_lp_solve {
	KIND="ilp"
	DOC="lp_solve 4.x ILP solver"
}

function config_lp_solve5 {
	KIND="ilp"
	DOC="lp_solve 5.x ILP solver"
}

function config_ppc {
	KIND="loader"
	DOC="PowerPC architecture loader"
}

function config_s12x {
	KIND="loader"
	DOC="Star12X architecture loader"
}

function config_arm {
	KIND="loader"
	DOC="ARM architecture loader"
}

function config_bpred {
	KIND="proc"
	DOC="branch prediction"
}
function config_ets {
	KIND="proc"
	DOC="Extended Timing Schema"
}


# Compute the module list
modules="display ets"
@HAS_SYSTEMC_TRUE@		modules="$modules gensim"
@HAS_LP_SOLVE_TRUE@		modules="$modules lp_solve"
@HAS_LP_SOLVE5_TRUE@	modules="$modules lp_solve5"
@HAS_GLISS_PPC_TRUE@	modules="$modules ppc"
@HAS_GLISS_S12X_TRUE@	modules="$modules s12x"
@HAS_GLISS_ARM_TRUE@	modules="$modules arm"
@HAS_ILP_TRUE@			modules="$modules bpred"


# Decode options
while test "$1" != ""; do
	case "$1" in
	--cflags)
		cflags=ok
		option=ok
		;;
	--libs)
		libs=ok
		option=ok
		;;
	--data)
		data=ok
		option=ok
		;;
	--doc)
		doc=ok
		option=ok
		;;
	--has-so)
		exit @HAS_SO@
		;;
	--version)
		echo "@PACKAGE@ @VERSION@"
		exit 1
		;;
	--help|-h)
		;;
	--ilp)
		option=ok
		ilp=ok
		;;
	--loader)
		option=ok
		loader=ok
		;;
	--modules)
		option=ok
		list_modules=ok
		;;
	--proc)
		option=ok
		list_proc=ok
		;;
	--prefix)
		echo "@prefix@"
		exit 0
		;;
	-*)
		echo "ERROR: unknown option '$1'."
		exit 1
		;;
	+*)
		mod="${1#+}"
		if [ `expr match "$modules" ".*$mod.*"` == 0 ]; then
			echo "ERROR: unknown module $mod"
			exit 1
		fi
		KIND=""
		LIB_STATIC=""
		config_$mod
		if [ -z "$LIB_STATIC" ]; then
			case "$KIND" in
			ilp)
				LIB_STATIC="-u${mod}_plugin @prefix@/lib/otawa/ilp/$mod.la"
				;;
			loader)
				LIB_STATIC="-u${mod}_plugin @prefix@/lib/otawa/loader/$mod.la"
				;;
			lib)
				LIB_STATIC="@prefix@/lib/libo$mod.la"
				;;
			proc)
				LIB_STATIC="@prefix@/lib/otawa/proc/$mod.la"
				;;
			esac
		fi
		libs_text="$LIB_STATIC $libs_text"
		;;
	*)
		mod="$1"
		if [ `expr match "$modules" ".*$mod.*"` == 0 ]; then
			echo "ERROR: unknown module $mod"
			exit 1
		fi
		KIND=""
		LIB=""
		config_$mod
		if [ -z "$LIB" ]; then
			case "$KIND" in
			ilp)
				@HAS_PLUGIN_FALSE@ LIB="-u${mod}_plugin @prefix@/lib/otawa/ilp/$mod.la"
				;;
			loader)
				@HAS_PLUGIN_FALSE@ LIB="-u${mod}_plugin @prefix@/lib/otawa/loader/$mod.la"
				;;
			lib)
				LIB="@prefix@/lib/libo$mod.la"
				;;
			proc)
				LIB="@prefix@/lib/otawa/proc/$mod.la"
				;;
			esac
		fi
		libs_text="$LIB $libs_text"
		;;
	esac
	shift
done

# Check options
if test "$option" == ""; then
	echo "SYNTAX: otawa-config [-h|--help] [--cflags] [--libs] [--data] [+]modules..."
	echo "	--cflags: display required compilation flags."
	echo "	--data: display path to package data."
	echo "	--doc: display path to the auto-documentation."
	echo "	--has-so: exit 0 if OTAWA is a shared object, false else."
	echo "	--ilp: list ILP solver plugins available."
	echo "	--libs: display required libs."
	echo "	--loader: list loader plugins available."
	echo "	--modules: list available modules."
	echo "  --prefix: get the prefix of installation."
	echo "	--proc: list available processor collections."
	echo "	+module: Link module statically, even if we have plugins."
	echo "Modules may be:"
	for mod in $modules; do
		DOC=""
		config_$mod
		echo "	$mod -- $DOC"
	done
	exit
fi

# Perform display
if test "$cflags" == "ok"; then
	echo $cflags_text
fi
if test "$libs" == "ok"; then
	echo $libs_text
fi
if test "$data" == "ok"; then
	echo @prefix@/share/Otawa
fi
if test "$doc" == "ok"; then
	echo @prefix@/share/Otawa/autodoc/index.html
fi

# --ilp
if [ "$ilp" == "ok" ]; then
	one="no"
	paths="@ILP_PATHS@ $HOME/.otawa/ilp $PWD/.otawa/ilp"
	for path in $paths; do
		if [ -d "$path" ]; then
			for plugin in `cd $path; ls *.so`; do
				echo "${plugin%*.so} ($path)"
				one="yes"
			done
		fi
	done
	if [ "$one" == "no" ]; then
		echo "no plugin found in [$paths]"
	fi
fi

# --loader
if [ "$loader" == "ok" ]; then
	one="no"
	paths="@LOADER_PATHS@ $HOME/.otawa/loader $PWD/.otawa/loader"
	for path in $paths; do
		if [ -d "$path" ]; then
			for plugin in ` cd $path; ls *.so`; do
				echo "${plugin%*.so} ($path)"
				one="yes"
			done
		fi
	done
	if [ "$one" == "no" ]; then
		echo "no plugin found in [$paths]"
	fi
fi

# --proc
if [ "$list_proc" == "ok" ]; then
	one="no"
	paths="@prefix@/lib/otawa/proc $HOME/.otawa/proc $PWD/.otawa/proc"
	for path in $paths; do
		if [ -d "$path" ]; then
			for plugin in `cd $path; ls *.la`; do
				echo "${plugin%*.la} ($path)"
				one="yes"
			done
		fi
	done
	if [ "$one" == "no" ]; then
		echo "no plugin found in [$paths]"
	fi
fi

# --modules
if [ "$list_modules" == "ok" ]; then
	for module in $modules; do
		DOC=""
		config_$module
		echo "[$module]"
		echo "	$DOC"
	done
fi
