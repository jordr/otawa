/* Generated by gliss-attr (112/03/08 12:07:42) copyright (c) 2009 IRIT - UPS */

extern "C" {
#include <arm/api.h>
#include <arm/id.h>
#include <arm/macros.h>
#include <arm/grt.h>
}

typedef void (*sem_fun_t)(arm_inst_t *inst, otawa::sem::Block& block);

/*** functions ***/

static void otawa_sem_UNKNOWN(arm_inst_t *inst, otawa::sem::Block& block) {
}

static void otawa_sem_MOV_RD__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MOV_RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_TST_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SUB_RD__RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SUB_SP___ID__2A_4(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SUB_RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SUB_RD__RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRH_RD___LT_RD__RD__RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRH_RD___LT_RD___ID__2A_2_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRB_RD___LT_RD__RD__RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRB_RD___LT_RD___ID_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STR_RD___LT_SP___ID__2A_4_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STR_RD___LT_RD__RD__RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STR_RD___LT_RD___ID__2A_4_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STMIA_RD_21___LB_S_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SBC_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ROR_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_PUSH__LB_S_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_PUSH__LB_S_RB__0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_POP__LB_S_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_POP__LB_S_RB__0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ORR_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_NEG_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MVN_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MUL_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LSR_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LSR_RD__RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LSL_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LSL_RD__RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRSH_RD___LT_RD__RD__RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRSB_RD___LT_RD__RD__RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRH_RD___LT_RD__RD__RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRH_RD___LT_RD___ID__2A_2_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRB_RD___LT_RD__RD__RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRB_RD___LT_RD___ID_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDR_RD___LT_SP___ID__2A_4_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDR_RD___LT_PC___ID__2A_4_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDR_RD___LT_RD__RD__RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDR_RD___LT_RD___ID__2A_4_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDMIA_RD_21___LB_S_RB_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_EOR_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_CMP_RD__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_CMP_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_CMP_RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_CMN_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_BX_S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_BLX_S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_BLS_D(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_BIC_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_S__ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ASR_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ASR_RD__RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_AND_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ADD_RD__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ADD_RD__RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ADD_SP___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ADD_RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ADD_RD___ID_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ADD_RD___ID_1(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ADD_RD__RD___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ADC_RD__RD(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MRSS_S__CPSR(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MRSS_S__SPSR(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR___S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FSXC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_SXC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FXC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FSX__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_XC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_SC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_SX__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_F__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FX__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FS__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_C__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_X__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_F__S_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR___S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FSXC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_SXC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FXC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FSX__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_XC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_SC__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_SX__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_F__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FX__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FS__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_C__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_X__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_F__S_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR____ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FSXC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_SXC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FXC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FSX___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_XC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_SC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_SX___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_F___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FX___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_FS___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_C___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_X___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_CPSR_F___ID_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR____ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FSXC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_SXC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FXC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FSX___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_XC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_SC___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_SX___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_F___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FX___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_FS___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_C___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_X___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MSRS_SPSR_F___ID_0(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_CDPS_D__D__D__D__D__D(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_BFIS_S___ID___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_CLZS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SWPS_S__S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SWPSB_S__S___LT_S_RT_(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UMLALSS_S_S_S_S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SMLALSS_S_S_S_S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_UMULLSS_S_S_S_S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SMULLSS_S_S_S_S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MULSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MLASS_S__S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SWIS_D(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDMSS_SS___LB_S_RB_S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STMSS_SS___LB_S_RB_S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRSSH_S___LT_SS_SSSS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRSSH_S___LT_SS_S_ILUSS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRSSB_S___LT_SS_SSSS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRSSB_S___LT_SS_S_ILUSS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRSH_S___LT_SS_SSSS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRSH_S___LT_SS_S_ILUSS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRSH_S___LT_SS_SSSS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRSH_S___LT_SS_S_ILUSS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRSSS_S___LT_SS__SS__S__IDSS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRRSSS_S___LT_SS__SS__S__IDSS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_STRSSS_S___LT_SS_S_IDSS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_LDRSSS_S___LT_SS_S_IDSS(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_BSS_LX(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_BXS_S(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_TSTS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_TSTS_S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_TSTS_S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(-1));
		break;
	case 2:
		block.add(sem::asr(-1, _GPR(ARM_TSTS_S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 1:
		block.add(sem::shr(-1, _GPR(ARM_TSTS_S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 0:
		block.add(sem::shl(-1, _GPR(ARM_TSTS_S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_TSTS_S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	}

};

static void otawa_sem_TSTS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::seti(-1, ARM_TSTS_S__S_x_shifter_operand_shiftAmt));
	else {
		switch(ARM_TSTS_S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(-1));
			if((((uint32_t)(ARM_TSTS_S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(-1, _GPR(ARM_TSTS_S__S_x_shifter_operand_r_r), -1));
			break;
		case 1:
			block.add(sem::shr(-1, _GPR(ARM_TSTS_S__S_x_shifter_operand_r_r), -1));
			break;
		case 0:
			block.add(sem::shl(-1, _GPR(ARM_TSTS_S__S_x_shifter_operand_r_r), -1));
			break;
		}
	}

};

static void otawa_sem_TEQS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_TEQS_S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_TEQS_S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(-1));
		break;
	case 2:
		block.add(sem::asr(-1, _GPR(ARM_TEQS_S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 1:
		block.add(sem::shr(-1, _GPR(ARM_TEQS_S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 0:
		block.add(sem::shl(-1, _GPR(ARM_TEQS_S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_TEQS_S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	}

};

static void otawa_sem_TEQS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::seti(-1, ARM_TEQS_S__S_x_shifter_operand_shiftAmt));
	else {
		switch(ARM_TEQS_S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(-1));
			if((((uint32_t)(ARM_TEQS_S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(-1, _GPR(ARM_TEQS_S__S_x_shifter_operand_r_r), -1));
			break;
		case 1:
			block.add(sem::shr(-1, _GPR(ARM_TEQS_S__S_x_shifter_operand_r_r), -1));
			break;
		case 0:
			block.add(sem::shl(-1, _GPR(ARM_TEQS_S__S_x_shifter_operand_r_r), -1));
			break;
		}
	}

};

static void otawa_sem_SUBSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SUBSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(-1));
		break;
	case 2:
		block.add(sem::asr(-1, _GPR(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 1:
		block.add(sem::shr(-1, _GPR(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 0:
		block.add(sem::shl(-1, _GPR(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_SUBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	}

};

static void otawa_sem_SUBSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::seti(-1, ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt));
	else {
		switch(ARM_SUBSS_S__S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(-1));
			if((((uint32_t)(ARM_SUBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(-1, _GPR(ARM_SUBSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		case 1:
			block.add(sem::shr(-1, _GPR(ARM_SUBSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		case 0:
			block.add(sem::shl(-1, _GPR(ARM_SUBSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		}
	}

};

static void otawa_sem_SBCSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_SBCSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(-1));
		break;
	case 2:
		block.add(sem::asr(-1, _GPR(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 1:
		block.add(sem::shr(-1, _GPR(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 0:
		block.add(sem::shl(-1, _GPR(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_SBCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	}

};

static void otawa_sem_SBCSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::seti(-1, ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt));
	else {
		switch(ARM_SBCSS_S__S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(-1));
			if((((uint32_t)(ARM_SBCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(-1, _GPR(ARM_SBCSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		case 1:
			block.add(sem::shr(-1, _GPR(ARM_SBCSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		case 0:
			block.add(sem::shl(-1, _GPR(ARM_SBCSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		}
	}

};

static void otawa_sem_RSCSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_RSCSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(-1));
		break;
	case 2:
		block.add(sem::asr(-1, _GPR(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 1:
		block.add(sem::shr(-1, _GPR(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 0:
		block.add(sem::shl(-1, _GPR(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_RSCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	}

};

static void otawa_sem_RSCSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::seti(-1, ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt));
	else {
		switch(ARM_RSCSS_S__S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(-1));
			if((((uint32_t)(ARM_RSCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(-1, _GPR(ARM_RSCSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		case 1:
			block.add(sem::shr(-1, _GPR(ARM_RSCSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		case 0:
			block.add(sem::shl(-1, _GPR(ARM_RSCSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		}
	}

};

static void otawa_sem_RSBSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_RSBSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(-1));
		break;
	case 2:
		block.add(sem::asr(-1, _GPR(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 1:
		block.add(sem::shr(-1, _GPR(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 0:
		block.add(sem::shl(-1, _GPR(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_RSBSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	}

};

static void otawa_sem_RSBSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::seti(-1, ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt));
	else {
		switch(ARM_RSBSS_S__S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(-1));
			if((((uint32_t)(ARM_RSBSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(-1, _GPR(ARM_RSBSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		case 1:
			block.add(sem::shr(-1, _GPR(ARM_RSBSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		case 0:
			block.add(sem::shl(-1, _GPR(ARM_RSBSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		}
	}

};

static void otawa_sem_ORRSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ORRSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(-1));
		break;
	case 2:
		block.add(sem::asr(-1, _GPR(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 1:
		block.add(sem::shr(-1, _GPR(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 0:
		block.add(sem::shl(-1, _GPR(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_ORRSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	}

};

static void otawa_sem_ORRSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::seti(-1, ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt));
	else {
		switch(ARM_ORRSS_S__S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(-1));
			if((((uint32_t)(ARM_ORRSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(-1, _GPR(ARM_ORRSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		case 1:
			block.add(sem::shr(-1, _GPR(ARM_ORRSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		case 0:
			block.add(sem::shl(-1, _GPR(ARM_ORRSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		}
	}

};

static void otawa_sem_MVNSS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MVNSS_S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(-1));
		break;
	case 2:
		block.add(sem::asr(-1, _GPR(ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 1:
		block.add(sem::shr(-1, _GPR(ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 0:
		block.add(sem::shl(-1, _GPR(ARM_MVNSS_S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_MVNSS_S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	}

};

static void otawa_sem_MVNSS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::seti(-1, ARM_MVNSS_S__S_x_shifter_operand_shiftAmt));
	else {
		switch(ARM_MVNSS_S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(-1));
			if((((uint32_t)(ARM_MVNSS_S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(-1, _GPR(ARM_MVNSS_S__S_x_shifter_operand_r_r), -1));
			break;
		case 1:
			block.add(sem::shr(-1, _GPR(ARM_MVNSS_S__S_x_shifter_operand_r_r), -1));
			break;
		case 0:
			block.add(sem::shl(-1, _GPR(ARM_MVNSS_S__S_x_shifter_operand_r_r), -1));
			break;
		}
	}

};

static void otawa_sem_MOVSS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_MOVSS_S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(-1));
		break;
	case 2:
		block.add(sem::asr(-1, _GPR(ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 1:
		block.add(sem::shr(-1, _GPR(ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 0:
		block.add(sem::shl(-1, _GPR(ARM_MOVSS_S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_MOVSS_S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	}

};

static void otawa_sem_MOVSS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::seti(-1, ARM_MOVSS_S__S_x_shifter_operand_shiftAmt));
	else {
		switch(ARM_MOVSS_S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(-1));
			if((((uint32_t)(ARM_MOVSS_S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(-1, _GPR(ARM_MOVSS_S__S_x_shifter_operand_r_r), -1));
			break;
		case 1:
			block.add(sem::shr(-1, _GPR(ARM_MOVSS_S__S_x_shifter_operand_r_r), -1));
			break;
		case 0:
			block.add(sem::shl(-1, _GPR(ARM_MOVSS_S__S_x_shifter_operand_r_r), -1));
			break;
		}
	}

};

static void otawa_sem_EORSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_EORSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(-1));
		break;
	case 2:
		block.add(sem::asr(-1, _GPR(ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 1:
		block.add(sem::shr(-1, _GPR(ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 0:
		block.add(sem::shl(-1, _GPR(ARM_EORSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_EORSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	}

};

static void otawa_sem_EORSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::seti(-1, ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt));
	else {
		switch(ARM_EORSS_S__S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(-1));
			if((((uint32_t)(ARM_EORSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(-1, _GPR(ARM_EORSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		case 1:
			block.add(sem::shr(-1, _GPR(ARM_EORSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		case 0:
			block.add(sem::shl(-1, _GPR(ARM_EORSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		}
	}

};

static void otawa_sem_CMPS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_CMPS_S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_CMPS_S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(-1));
		break;
	case 2:
		block.add(sem::asr(-1, _GPR(ARM_CMPS_S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 1:
		block.add(sem::shr(-1, _GPR(ARM_CMPS_S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 0:
		block.add(sem::shl(-1, _GPR(ARM_CMPS_S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_CMPS_S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	}

};

static void otawa_sem_CMPS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::seti(-1, ARM_CMPS_S__S_x_shifter_operand_shiftAmt));
	else {
		switch(ARM_CMPS_S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(-1));
			if((((uint32_t)(ARM_CMPS_S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(-1, _GPR(ARM_CMPS_S__S_x_shifter_operand_r_r), -1));
			break;
		case 1:
			block.add(sem::shr(-1, _GPR(ARM_CMPS_S__S_x_shifter_operand_r_r), -1));
			break;
		case 0:
			block.add(sem::shl(-1, _GPR(ARM_CMPS_S__S_x_shifter_operand_r_r), -1));
			break;
		}
	}

};

static void otawa_sem_CMNS_S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_CMNS_S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_CMNS_S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(-1));
		break;
	case 2:
		block.add(sem::asr(-1, _GPR(ARM_CMNS_S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 1:
		block.add(sem::shr(-1, _GPR(ARM_CMNS_S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 0:
		block.add(sem::shl(-1, _GPR(ARM_CMNS_S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_CMNS_S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	}

};

static void otawa_sem_CMNS_S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::seti(-1, ARM_CMNS_S__S_x_shifter_operand_shiftAmt));
	else {
		switch(ARM_CMNS_S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(-1));
			if((((uint32_t)(ARM_CMNS_S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(-1, _GPR(ARM_CMNS_S__S_x_shifter_operand_r_r), -1));
			break;
		case 1:
			block.add(sem::shr(-1, _GPR(ARM_CMNS_S__S_x_shifter_operand_r_r), -1));
			break;
		case 0:
			block.add(sem::shl(-1, _GPR(ARM_CMNS_S__S_x_shifter_operand_r_r), -1));
			break;
		}
	}

};

static void otawa_sem_BICSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_BICSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(-1));
		break;
	case 2:
		block.add(sem::asr(-1, _GPR(ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 1:
		block.add(sem::shr(-1, _GPR(ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 0:
		block.add(sem::shl(-1, _GPR(ARM_BICSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_BICSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	}

};

static void otawa_sem_BICSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::seti(-1, ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt));
	else {
		switch(ARM_BICSS_S__S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(-1));
			if((((uint32_t)(ARM_BICSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(-1, _GPR(ARM_BICSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		case 1:
			block.add(sem::shr(-1, _GPR(ARM_BICSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		case 0:
			block.add(sem::shl(-1, _GPR(ARM_BICSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		}
	}

};

static void otawa_sem_ANDSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
;
};

static void otawa_sem_ANDSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(-1));
		break;
	case 2:
		block.add(sem::asr(-1, _GPR(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 1:
		block.add(sem::shr(-1, _GPR(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 0:
		block.add(sem::shl(-1, _GPR(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_ANDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	}

};

static void otawa_sem_ANDSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::seti(-1, ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt));
	else {
		switch(ARM_ANDSS_S__S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(-1));
			if((((uint32_t)(ARM_ANDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(-1, _GPR(ARM_ANDSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		case 1:
			block.add(sem::shr(-1, _GPR(ARM_ANDSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		case 0:
			block.add(sem::shl(-1, _GPR(ARM_ANDSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		}
	}

};

static void otawa_sem_ADDSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(-1));
		break;
	case 2:
		block.add(sem::asr(-1, _GPR(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 1:
		block.add(sem::shr(-1, _GPR(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 0:
		block.add(sem::shl(-1, _GPR(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_ADDSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	}
	block.add(sem::add(_GPR(ARM_ADDSS_S__S__S__S_S_x_rd_r), _GPR(ARM_ADDSS_S__S__S__S_S_x_rn_r), -1));
	if(ARM_ADDSS_S__S__S__S_S_x_sets_set) {
		block.add(sem::seti(-1, 0));
		block.add(sem::cmp(_CPSR(), _GPR(ARM_ADDSS_S__S__S__S_S_x_rd_r), -1));
	}

};

static void otawa_sem_ADDSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::seti(-1, ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt));
	else {
		switch(ARM_ADDSS_S__S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(-1));
			if((((uint32_t)(ARM_ADDSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(-1, _GPR(ARM_ADDSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		case 1:
			block.add(sem::shr(-1, _GPR(ARM_ADDSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		case 0:
			block.add(sem::shl(-1, _GPR(ARM_ADDSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		}
	}
	block.add(sem::add(_GPR(ARM_ADDSS_S__S__S_x_rd_r), _GPR(ARM_ADDSS_S__S__S_x_rn_r), -1));
	if(ARM_ADDSS_S__S__S_x_sets_set) {
		block.add(sem::seti(-1, 0));
		block.add(sem::cmp(_CPSR(), _GPR(ARM_ADDSS_S__S__S_x_rd_r), -1));
	}

};

static void otawa_sem_ADCSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::scratch(_GPR(ARM_ADCSS_S__S___ID_x_rd_r)));
	if(ARM_ADCSS_S__S___ID_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ADCSS_S__S__S__S_S(arm_inst_t *inst, otawa::sem::Block& block) {
	switch(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftKind) {
	case 3:
		block.add(sem::scratch(-1));
		break;
	case 2:
		block.add(sem::asr(-1, _GPR(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 1:
		block.add(sem::shr(-1, _GPR(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	case 0:
		block.add(sem::shl(-1, _GPR(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_r_r), _GPR(ARM_ADCSS_S__S__S__S_S_x_shifter_operand_shiftAmt_r)));
		break;
	}
	block.add(sem::scratch(_GPR(ARM_ADCSS_S__S__S__S_S_x_rd_r)));
	if(ARM_ADCSS_S__S__S__S_S_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ADCSS_S__S__S(arm_inst_t *inst, otawa::sem::Block& block) {
	if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
		block.add(sem::seti(-1, ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt));
	else {
		switch(ARM_ADCSS_S__S__S_x_shifter_operand_shiftKind) {
		case 3:
			block.add(sem::scratch(-1));
			if((((uint32_t)(ARM_ADCSS_S__S__S_x_shifter_operand_shiftAmt)) == 0))
				block.add(sem::scratch(_CPSR()));
			break;
		case 2:
			block.add(sem::asr(-1, _GPR(ARM_ADCSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		case 1:
			block.add(sem::shr(-1, _GPR(ARM_ADCSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		case 0:
			block.add(sem::shl(-1, _GPR(ARM_ADCSS_S__S__S_x_shifter_operand_r_r), -1));
			break;
		}
	}
	block.add(sem::scratch(_GPR(ARM_ADCSS_S__S__S_x_rd_r)));
	if(ARM_ADCSS_S__S__S_x_sets_set)
		block.add(sem::scratch(_CPSR()));

};

static void otawa_sem_ADDSS_S__S___ID(arm_inst_t *inst, otawa::sem::Block& block) {
	block.add(sem::seti(-1, arm_rotate_right32(32, ((uint32_t)(ARM_ADDSS_S__S___ID_x_shifter_operand_v)), (((uint32_t)(ARM_ADDSS_S__S___ID_x_shifter_operand_rotate)) << 1))));
	block.add(sem::add(_GPR(ARM_ADDSS_S__S___ID_x_rd_r), _GPR(ARM_ADDSS_S__S___ID_x_rn_r), -1));
	if(ARM_ADDSS_S__S___ID_x_sets_set) {
		block.add(sem::seti(-1, 0));
		block.add(sem::cmp(_CPSR(), _GPR(ARM_ADDSS_S__S___ID_x_rd_r), -1));
	}

};




/*** function table ***/
static sem_fun_t sem_funs[] = {
	otawa_sem_UNKNOWN,
	otawa_sem_MOV_RD__S,
	otawa_sem_MOV_RD___ID,
	otawa_sem_TST_RD__RD,
	otawa_sem_SUB_RD__RD__RD,
	otawa_sem_SUB_SP___ID__2A_4,
	otawa_sem_SUB_RD___ID,
	otawa_sem_SUB_RD__RD___ID,
	otawa_sem_STRH_RD___LT_RD__RD__RT_,
	otawa_sem_STRH_RD___LT_RD___ID__2A_2_RT_,
	otawa_sem_STRB_RD___LT_RD__RD__RT_,
	otawa_sem_STRB_RD___LT_RD___ID_RT_,
	otawa_sem_STR_RD___LT_SP___ID__2A_4_RT_,
	otawa_sem_STR_RD___LT_RD__RD__RT_,
	otawa_sem_STR_RD___LT_RD___ID__2A_4_RT_,
	otawa_sem_STMIA_RD_21___LB_S_RB_,
	otawa_sem_SBC_RD__RD,
	otawa_sem_ROR_RD__RD,
	otawa_sem_PUSH__LB_S_RB_,
	otawa_sem_PUSH__LB_S_RB__0,
	otawa_sem_POP__LB_S_RB_,
	otawa_sem_POP__LB_S_RB__0,
	otawa_sem_ORR_RD__RD,
	otawa_sem_NEG_RD__RD,
	otawa_sem_MVN_RD__RD,
	otawa_sem_MUL_RD__RD,
	otawa_sem_LSR_RD__RD,
	otawa_sem_LSR_RD__RD___ID,
	otawa_sem_LSL_RD__RD,
	otawa_sem_LSL_RD__RD___ID,
	otawa_sem_LDRSH_RD___LT_RD__RD__RT_,
	otawa_sem_LDRSB_RD___LT_RD__RD__RT_,
	otawa_sem_LDRH_RD___LT_RD__RD__RT_,
	otawa_sem_LDRH_RD___LT_RD___ID__2A_2_RT_,
	otawa_sem_LDRB_RD___LT_RD__RD__RT_,
	otawa_sem_LDRB_RD___LT_RD___ID_RT_,
	otawa_sem_LDR_RD___LT_SP___ID__2A_4_RT_,
	otawa_sem_LDR_RD___LT_PC___ID__2A_4_RT_,
	otawa_sem_LDR_RD___LT_RD__RD__RT_,
	otawa_sem_LDR_RD___LT_RD___ID__2A_4_RT_,
	otawa_sem_LDMIA_RD_21___LB_S_RB_,
	otawa_sem_EOR_RD__RD,
	otawa_sem_CMP_RD__S,
	otawa_sem_CMP_RD__RD,
	otawa_sem_CMP_RD___ID,
	otawa_sem_CMN_RD__RD,
	otawa_sem_BX_S,
	otawa_sem_BLX_S,
	otawa_sem_BLS_D,
	otawa_sem_BIC_RD__RD,
	otawa_sem_S__ID,
	otawa_sem_ASR_RD__RD,
	otawa_sem_ASR_RD__RD___ID,
	otawa_sem_AND_RD__RD,
	otawa_sem_ADD_RD__S,
	otawa_sem_ADD_RD__RD__RD,
	otawa_sem_ADD_SP___ID,
	otawa_sem_ADD_RD___ID,
	otawa_sem_ADD_RD___ID_0,
	otawa_sem_ADD_RD___ID_1,
	otawa_sem_ADD_RD__RD___ID,
	otawa_sem_ADC_RD__RD,
	otawa_sem_MRSS_S__CPSR,
	otawa_sem_MRSS_S__SPSR,
	otawa_sem_MSRS_CPSR___S,
	otawa_sem_MSRS_CPSR_FSXC__S,
	otawa_sem_MSRS_CPSR_SXC__S,
	otawa_sem_MSRS_CPSR_FXC__S,
	otawa_sem_MSRS_CPSR_FSX__S,
	otawa_sem_MSRS_CPSR_XC__S,
	otawa_sem_MSRS_CPSR_SC__S,
	otawa_sem_MSRS_CPSR_SX__S,
	otawa_sem_MSRS_CPSR_F__S,
	otawa_sem_MSRS_CPSR_FX__S,
	otawa_sem_MSRS_CPSR_FS__S,
	otawa_sem_MSRS_CPSR_C__S,
	otawa_sem_MSRS_CPSR_X__S,
	otawa_sem_MSRS_CPSR_S__S,
	otawa_sem_MSRS_CPSR_F__S_0,
	otawa_sem_MSRS_SPSR___S,
	otawa_sem_MSRS_SPSR_FSXC__S,
	otawa_sem_MSRS_SPSR_SXC__S,
	otawa_sem_MSRS_SPSR_FXC__S,
	otawa_sem_MSRS_SPSR_FSX__S,
	otawa_sem_MSRS_SPSR_XC__S,
	otawa_sem_MSRS_SPSR_SC__S,
	otawa_sem_MSRS_SPSR_SX__S,
	otawa_sem_MSRS_SPSR_F__S,
	otawa_sem_MSRS_SPSR_FX__S,
	otawa_sem_MSRS_SPSR_FS__S,
	otawa_sem_MSRS_SPSR_C__S,
	otawa_sem_MSRS_SPSR_X__S,
	otawa_sem_MSRS_SPSR_S__S,
	otawa_sem_MSRS_SPSR_F__S_0,
	otawa_sem_MSRS_CPSR____ID,
	otawa_sem_MSRS_CPSR_FSXC___ID,
	otawa_sem_MSRS_CPSR_SXC___ID,
	otawa_sem_MSRS_CPSR_FXC___ID,
	otawa_sem_MSRS_CPSR_FSX___ID,
	otawa_sem_MSRS_CPSR_XC___ID,
	otawa_sem_MSRS_CPSR_SC___ID,
	otawa_sem_MSRS_CPSR_SX___ID,
	otawa_sem_MSRS_CPSR_F___ID,
	otawa_sem_MSRS_CPSR_FX___ID,
	otawa_sem_MSRS_CPSR_FS___ID,
	otawa_sem_MSRS_CPSR_C___ID,
	otawa_sem_MSRS_CPSR_X___ID,
	otawa_sem_MSRS_CPSR_S___ID,
	otawa_sem_MSRS_CPSR_F___ID_0,
	otawa_sem_MSRS_SPSR____ID,
	otawa_sem_MSRS_SPSR_FSXC___ID,
	otawa_sem_MSRS_SPSR_SXC___ID,
	otawa_sem_MSRS_SPSR_FXC___ID,
	otawa_sem_MSRS_SPSR_FSX___ID,
	otawa_sem_MSRS_SPSR_XC___ID,
	otawa_sem_MSRS_SPSR_SC___ID,
	otawa_sem_MSRS_SPSR_SX___ID,
	otawa_sem_MSRS_SPSR_F___ID,
	otawa_sem_MSRS_SPSR_FX___ID,
	otawa_sem_MSRS_SPSR_FS___ID,
	otawa_sem_MSRS_SPSR_C___ID,
	otawa_sem_MSRS_SPSR_X___ID,
	otawa_sem_MSRS_SPSR_S___ID,
	otawa_sem_MSRS_SPSR_F___ID_0,
	otawa_sem_CDPS_D__D__D__D__D__D,
	otawa_sem_BFIS_S___ID___ID,
	otawa_sem_CLZS_S__S,
	otawa_sem_SWPS_S__S___LT_S_RT_,
	otawa_sem_SWPSB_S__S___LT_S_RT_,
	otawa_sem_UMLALSS_S_S_S_S,
	otawa_sem_SMLALSS_S_S_S_S,
	otawa_sem_UMULLSS_S_S_S_S,
	otawa_sem_SMULLSS_S_S_S_S,
	otawa_sem_MULSS_S__S__S,
	otawa_sem_MLASS_S__S__S__S,
	otawa_sem_SWIS_D,
	otawa_sem_LDMSS_SS___LB_S_RB_S,
	otawa_sem_STMSS_SS___LB_S_RB_S,
	otawa_sem_LDRSSH_S___LT_SS_SSSS,
	otawa_sem_LDRSSH_S___LT_SS_S_ILUSS,
	otawa_sem_LDRSSB_S___LT_SS_SSSS,
	otawa_sem_LDRSSB_S___LT_SS_S_ILUSS,
	otawa_sem_LDRSH_S___LT_SS_SSSS,
	otawa_sem_LDRSH_S___LT_SS_S_ILUSS,
	otawa_sem_STRSH_S___LT_SS_SSSS,
	otawa_sem_STRSH_S___LT_SS_S_ILUSS,
	otawa_sem_STRSSS_S___LT_SS__SS__S__IDSS,
	otawa_sem_LDRRSSS_S___LT_SS__SS__S__IDSS,
	otawa_sem_STRSSS_S___LT_SS_S_IDSS,
	otawa_sem_LDRSSS_S___LT_SS_S_IDSS,
	otawa_sem_BSS_LX,
	otawa_sem_BXS_S,
	otawa_sem_TSTS_S___ID,
	otawa_sem_TSTS_S__S__S_S,
	otawa_sem_TSTS_S__S,
	otawa_sem_TEQS_S___ID,
	otawa_sem_TEQS_S__S__S_S,
	otawa_sem_TEQS_S__S,
	otawa_sem_SUBSS_S__S___ID,
	otawa_sem_SUBSS_S__S__S__S_S,
	otawa_sem_SUBSS_S__S__S,
	otawa_sem_SBCSS_S__S___ID,
	otawa_sem_SBCSS_S__S__S__S_S,
	otawa_sem_SBCSS_S__S__S,
	otawa_sem_RSCSS_S__S___ID,
	otawa_sem_RSCSS_S__S__S__S_S,
	otawa_sem_RSCSS_S__S__S,
	otawa_sem_RSBSS_S__S___ID,
	otawa_sem_RSBSS_S__S__S__S_S,
	otawa_sem_RSBSS_S__S__S,
	otawa_sem_ORRSS_S__S___ID,
	otawa_sem_ORRSS_S__S__S__S_S,
	otawa_sem_ORRSS_S__S__S,
	otawa_sem_MVNSS_S___ID,
	otawa_sem_MVNSS_S__S__S_S,
	otawa_sem_MVNSS_S__S,
	otawa_sem_MOVSS_S___ID,
	otawa_sem_MOVSS_S__S__S_S,
	otawa_sem_MOVSS_S__S,
	otawa_sem_EORSS_S__S___ID,
	otawa_sem_EORSS_S__S__S__S_S,
	otawa_sem_EORSS_S__S__S,
	otawa_sem_CMPS_S___ID,
	otawa_sem_CMPS_S__S__S_S,
	otawa_sem_CMPS_S__S,
	otawa_sem_CMNS_S___ID,
	otawa_sem_CMNS_S__S__S_S,
	otawa_sem_CMNS_S__S,
	otawa_sem_BICSS_S__S___ID,
	otawa_sem_BICSS_S__S__S__S_S,
	otawa_sem_BICSS_S__S__S,
	otawa_sem_ANDSS_S__S___ID,
	otawa_sem_ANDSS_S__S__S__S_S,
	otawa_sem_ANDSS_S__S__S,
	otawa_sem_ADDSS_S__S__S__S_S,
	otawa_sem_ADDSS_S__S__S,
	otawa_sem_ADCSS_S__S___ID,
	otawa_sem_ADCSS_S__S__S__S_S,
	otawa_sem_ADCSS_S__S__S,
	otawa_sem_ADDSS_S__S___ID
};

/**
 * Get the OTAWA semantics of the instruction.
 * @param inst		Current GLISS instruction.
 * @param block		Block to write semantics instructions in.
 */
static void arm_sem(arm_inst_t *inst, otawa::sem::Block& block) {
	sem_funs[inst->ident](inst, block);
}
